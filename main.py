#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª GPT-ONLY RentalBot —Å —Ä–µ–∞–ª—å–Ω–æ–π Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
1. –ö–ª–∏–µ–Ω—Ç—ã –ø–∏—à—É—Ç –≤ —á–∞—Ç—ã Avito
2. GPT –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ Avito API
3. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ Telegram
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-dotenv: pip install python-dotenv")

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import get_required_env_vars, get_config
from core import RentalBotCore, BotBuilder, ClientInfo
from telegram_bot import TelegramBot, TelegramBotFactory
from telegram_bot import TelegramManagerBot, TelegramManagerBotFactory
from avito_integration import (
    AvitoAPIClient, AvitoGPTBot, TelegramAvitoNotifier,
    AvitoIntegrationFactory, AvitoConfig
)


class ProductionRentalBotSystem:
    """
    –ü—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–∞ GPT-ONLY RentalBot —Å Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    """
    
    def __init__(self):
        self.logger = self._setup_logging()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rental_bot: Optional[RentalBotCore] = None
        self.telegram_manager_bot: Optional[TelegramManagerBot] = None
        self.avito_bot: Optional[AvitoGPTBot] = None
        self.avito_client: Optional[AvitoAPIClient] = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.avito_config = AvitoConfig()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.start_time = datetime.now()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.system_stats = {
            'avito_messages_processed': 0,
            'telegram_notifications_sent': 0,
            'gpt_completions': 0,
            'total_errors': 0,
            'start_time': self.start_time
        }
        
        print("üöÄ Production GPT-ONLY RentalBot System with Avito Integration")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('production_rental_bot.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        return logging.getLogger(__name__)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("Starting production system initialization...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_vars = get_required_env_vars()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Avito
            await self._load_avito_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GPT —è–¥—Ä–æ
            await self._initialize_gpt_core(env_vars['openai_key'])
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
            await self._initialize_telegram_for_managers(env_vars['telegram_token'])
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            await self._initialize_avito_integration()
            
            self.logger.info("‚úÖ All components initialized successfully")
            
        except Exception as e:
            self.logger.error(f"‚ùå System initialization failed: {e}")
            raise
    
    async def _load_avito_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Avito"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.avito_config.access_token = os.getenv("AVITO_ACCESS_TOKEN")
        self.avito_config.user_id = int(os.getenv("AVITO_USER_ID", "0"))
        
        # ID —á–∞—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ Telegram
        manager_ids_str = os.getenv("MANAGER_TELEGRAM_IDS", "")
        if manager_ids_str:
            self.avito_config.manager_chat_ids = [
                int(id.strip()) for id in manager_ids_str.split(",") if id.strip()
            ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.avito_config.polling_interval = int(os.getenv("AVITO_POLLING_INTERVAL", "10"))
        self.avito_config.rate_limit_delay = float(os.getenv("AVITO_RATE_LIMIT_DELAY", "1.0"))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.avito_config.access_token:
            raise ValueError("‚ùå AVITO_ACCESS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if not self.avito_config.user_id:
            raise ValueError("‚ùå AVITO_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.logger.info(f"‚úÖ Avito config loaded: user_id={self.avito_config.user_id}")
        self.logger.info(f"   Managers: {len(self.avito_config.manager_chat_ids)} configured")
    
    async def _initialize_gpt_core(self, openai_key: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT —è–¥—Ä–∞"""
        self.logger.info("Initializing GPT core...")
        
        # –°–æ–∑–¥–∞–µ–º GPT —è–¥—Ä–æ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        self.rental_bot = (BotBuilder(openai_key)
                          .with_completion_handler(self._handle_gpt_completion)
                          .with_error_handler(self._handle_gpt_error)
                          .with_database("production_rental.db")
                          .enable_logging(True)
                          .enable_stats(True)
                          .build())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = await self.rental_bot.health_check()
        if health['status'] != 'healthy':
            raise Exception(f"GPT core is not healthy: {health}")
        
        self.logger.info("‚úÖ GPT core initialized")
    
    async def _initialize_telegram_for_managers(self, telegram_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        self.logger.info("Initializing Telegram for managers...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.telegram_manager_bot = TelegramManagerBotFactory.create_manager_bot_with_predefined_managers(
            telegram_token,
            self.rental_bot,
            self.avito_config.manager_chat_ids
        )
        
        self.logger.info("‚úÖ Telegram manager bot initialized")
    
    async def _initialize_avito_integration(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.logger.info("Initializing Avito integration...")
        
        # –°–æ–∑–¥–∞–µ–º Avito API –∫–ª–∏–µ–Ω—Ç
        self.avito_client = AvitoAPIClient(
            self.avito_config.access_token,
            self.avito_config.user_id
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è Telegram
        telegram_notifier = None
        if self.telegram_manager_bot and self.avito_config.manager_chat_ids:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            telegram_notifier = self.telegram_manager_bot
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π Avito –±–æ—Ç
        self.avito_bot = AvitoGPTBot(
            self.avito_client,
            self.rental_bot,
            telegram_notifier
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Avito API
        try:
            async with self.avito_client as client:
                test_chats = await client.get_chats(limit=1)
                self.logger.info(f"‚úÖ Avito API connection successful")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Avito API test failed: {e}")
        
        self.logger.info("‚úÖ Avito integration initialized")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    
    async def _handle_gpt_completion(self, client: ClientInfo):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ GPT"""
        self.system_stats['gpt_completions'] += 1
        
        self.logger.info(f"‚úÖ GPT dialog completed for {client.user_id}")
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self._print_completion_summary(client)
    
    async def _handle_gpt_error(self, user_id: str, message: str, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ GPT"""
        self.system_stats['total_errors'] += 1
        self.logger.error(f"‚ùå GPT error for {user_id}: {error}")
    
    async def _print_completion_summary(self, client: ClientInfo):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        print("\n" + "="*80)
        print("üéâ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ß–ï–†–ï–ó AVITO + GPT!")
        print("="*80)
        
        if client.final_data:
            print(f"üë§ –ò–º—è: {client.final_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client.final_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"üè† –°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏: {client.final_data.get('residents_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤: {client.final_data.get('residents_count', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"üë∂ –î–µ—Ç–∏: {'–µ—Å—Ç—å' if client.final_data.get('has_children') else '–Ω–µ—Ç'}")
            print(f"üêï –ñ–∏–≤–æ—Ç–Ω—ã–µ: {'–µ—Å—Ç—å' if client.final_data.get('has_pets') else '–Ω–µ—Ç'}")
            print(f"üìÖ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {client.final_data.get('rental_period', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"üóìÔ∏è –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {client.final_data.get('move_in_deadline', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {client.message_count}")
        print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: Avito Messenger")
        print(f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {client.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        print("ü§ñ –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–ª–æ—Å—å GPT —á–µ—Ä–µ–∑ Avito API")
        print("="*80 + "\n")
    
    # –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üöÄ Starting Production GPT-ONLY RentalBot System...")
            
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º Telegram polling –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            # Telegram —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Avito —á–∞—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å)
            if self.avito_bot and self.avito_client:
                tasks.append(self._run_avito_monitoring())
            
            # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            tasks.append(self._system_monitoring_loop())
            
            self.is_running = True
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞
            await self._print_startup_status()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            await asyncio.gather(*tasks)
            
        except Exception as e:
            self.logger.error(f"üí• Critical startup error: {e}")
            await self.stop()
            raise
    
    async def _run_avito_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Avito —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            async with self.avito_client:
                await self.avito_bot.start_monitoring()
        except Exception as e:
            self.logger.error(f"Avito monitoring error: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("‚èπÔ∏è Stopping system...")
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.telegram_bot:
            await self.telegram_bot.stop()
        
        self.logger.info("‚úÖ System stopped")
    
    async def _system_monitoring_loop(self):
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        while self.is_running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                if not self.is_running:
                    break
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await self._log_system_stats()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                await self._health_check_all()
                
                # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if datetime.now().minute % 30 == 0:
                    await self._print_detailed_stats()
                
            except Exception as e:
                self.logger.error(f"System monitoring error: {e}")
                await asyncio.sleep(60)
    
    async def _log_system_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        stats = {
            'gpt_completions': self.system_stats['gpt_completions'],
            'total_errors': self.system_stats['total_errors']
        }
        
        if self.avito_bot:
            avito_stats = self.avito_bot.get_stats()
            stats.update({
                'avito_messages': avito_stats['messages_processed'],
                'active_dialogs': avito_stats['active_dialogs']
            })
        
        if self.rental_bot:
            bot_stats = self.rental_bot.get_stats()
            stats.update({
                'total_clients': bot_stats['users_count'],
                'total_messages': bot_stats['messages_count']
            })
        
        self.logger.info(f"System stats: {stats}")
    
    async def _health_check_all(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPT —è–¥—Ä–æ
            if self.rental_bot:
                health = await self.rental_bot.health_check()
                if health['status'] != 'healthy':
                    self.logger.warning(f"‚ö†Ô∏è GPT core issue: {health}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Avito API (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
            if self.avito_client:
                async with self.avito_client as client:
                    await client.get_chats(limit=1)
                    
        except Exception as e:
            self.logger.error(f"Health check failed: {e}")
    
    async def _print_startup_status(self):
        """–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "="*80)
        print("üöÄ PRODUCTION GPT-ONLY RENTALBOT SYSTEM ACTIVE!")
        print("="*80)
        print("üéØ –†–ï–ñ–ò–ú: PRODUCTION —Å Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        
        if self.rental_bot:
            print("   üß† GPT –Ø–¥—Ä–æ: –ê–ö–¢–ò–í–ù–û")
        
        if self.avito_bot:
            print("   üè† Avito –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–ö–¢–ò–í–ù–û")
        
        if self.telegram_bot:
            print("   üì± Telegram –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ê–ö–¢–ò–í–ù–û")
        
        print(f"   üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {len(self.avito_config.manager_chat_ids)}")
        
        print("\nüîÑ –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´:")
        print("   1. –ö–ª–∏–µ–Ω—Ç—ã –ø–∏—à—É—Ç –≤ —á–∞—Ç—ã Avito")
        print("   2. GPT –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ Avito API")
        print("   3. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ‚Üí Telegram –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        
        print(f"\n‚è∞ –ó–∞–ø—É—â–µ–Ω–æ: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîç –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ Avito: {self.avito_config.polling_interval}—Å")
        print("="*80 + "\n")
    
    async def _print_detailed_stats(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        uptime = datetime.now() - self.start_time
        
        print("\n" + "="*60)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        print("="*60)
        print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
        print(f"‚úÖ GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π: {self.system_stats['gpt_completions']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.system_stats['total_errors']}")
        
        if self.avito_bot:
            avito_stats = self.avito_bot.get_stats()
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π Avito: {avito_stats['messages_processed']}")
            print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {avito_stats['active_dialogs']}")
            print(f"üìà –°–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å: {avito_stats['processed_messages_per_hour']:.1f}")
        
        if self.rental_bot:
            bot_stats = self.rental_bot.get_stats()
            print(f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {bot_stats['users_count']}")
            print(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_stats['messages_count']}")
        
        print("="*60 + "\n")
    
    # –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    
    async def get_system_status(self) -> dict:
        """–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            'is_running': self.is_running,
            'start_time': self.start_time.isoformat(),
            'uptime_seconds': (datetime.now() - self.start_time).total_seconds(),
            'components': {},
            'stats': self.system_stats.copy()
        }
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.rental_bot:
            status['components']['gpt_core'] = await self.rental_bot.health_check()
        
        if self.avito_bot:
            status['components']['avito_bot'] = self.avito_bot.get_stats()
        
        if self.telegram_bot:
            status['components']['telegram_bot'] = {'status': 'active'}
        
        return status
    
    async def send_test_notification(self, test_data: dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
        if not self.avito_bot or not self.avito_bot.telegram_notifier:
            self.logger.warning("Telegram notifier not available")
            return False
        
        test_notification = test_data or {
            'source': 'avito',
            'chat_id': 'test_chat_123',
            'client_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
            'client_user_id': 12345,
            'item_id': 67890,
            'extracted_data': {
                'name': '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤',
                'phone': '+79123456789',
                'residents_info': '—Å–µ–º—å—è –∏–∑ 2 —á–µ–ª–æ–≤–µ–∫',
                'residents_count': 2,
                'has_children': False,
                'has_pets': True,
                'pets_details': '–∫–æ—Ç',
                'rental_period': '1 –≥–æ–¥',
                'move_in_deadline': '–¥–æ 15 –¥–µ–∫–∞–±—Ä—è'
            },
            'completed_at': datetime.now().isoformat()
        }
        
        try:
            await self.avito_bot.telegram_notifier.send_completion_notification(test_notification)
            self.logger.info("‚úÖ Test notification sent")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Test notification failed: {e}")
            return False


# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–æ–π
class ProductionCLI:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, system: ProductionRentalBotSystem):
        self.system = system
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("\nüéõÔ∏è Production System Management Console")
        print("Commands: status, stats, health, test-notification, avito-stats, quit")
        
        while self.system.is_running:
            try:
                command = input("\n> ").strip().lower()
                
                if command in ['quit', 'exit']:
                    break
                elif command == 'status':
                    await self._show_status()
                elif command == 'stats':
                    await self._show_stats()
                elif command == 'health':
                    await self._health_check()
                elif command == 'test-notification':
                    await self._test_notification()
                elif command == 'avito-stats':
                    await self._show_avito_stats()
                elif command == 'help':
                    self._show_help()
                else:
                    print("‚ùå Unknown command. Type 'help' for available commands.")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    async def _show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        status = await self.system.get_system_status()
        print(f"\nüìä System Status:")
        print(f"   Running: {'‚úÖ' if status['is_running'] else '‚ùå'}")
        print(f"   Uptime: {status['uptime_seconds']//3600:.0f}h {(status['uptime_seconds']%3600)//60:.0f}m")
        print(f"   Components: {len(status['components'])}")
        print(f"   GPT Completions: {status['stats']['gpt_completions']}")
        print(f"   Total Errors: {status['stats']['total_errors']}")
    
    async def _show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await self.system._print_detailed_stats()
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        await self.system._health_check_all()
        print("‚úÖ Health check completed")
    
    async def _test_notification(self):
        """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        success = await self.system.send_test_notification()
        print("‚úÖ Test notification sent" if success else "‚ùå Test notification failed")
    
    async def _show_avito_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Avito"""
        if self.system.avito_bot:
            stats = self.system.avito_bot.get_stats()
            print(f"\nüè† Avito Statistics:")
            print(f"   Messages processed: {stats['messages_processed']}")
            print(f"   Active dialogs: {stats['active_dialogs']}")
            print(f"   Messages per hour: {stats['processed_messages_per_hour']:.1f}")
            print(f"   Uptime: {stats['uptime_hours']:.1f}h")
        else:
            print("‚ùå Avito bot not available")
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("\nüìñ Available commands:")
        print("   status           - system status")
        print("   stats            - detailed statistics")
        print("   health           - health check")
        print("   test-notification - send test notification")
        print("   avito-stats      - Avito specific stats")
        print("   quit             - exit")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üè≠ GPT-ONLY RENTALBOT PRODUCTION SYSTEM")
    print("="*60)
    print("üîÑ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("   –ö–ª–∏–µ–Ω—Ç—ã ‚Üí Avito —á–∞—Ç—ã ‚Üí GPT –±–æ—Ç ‚Üí –ú–µ–Ω–µ–¥–∂–µ—Ä—ã Telegram")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—É
    system = ProductionRentalBotSystem()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await system.start()
        
    except KeyboardInterrupt:
        print("\nüëã Received stop signal")
    except Exception as e:
        print(f"\nüí• Critical error: {e}")
    finally:
        await system.stop()


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
async def main_interactive():
    """–ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    
    system = ProductionRentalBotSystem()
    cli = ProductionCLI(system)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
        system_task = asyncio.create_task(system.start())
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        await cli.run_interactive_mode()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await system.stop()
        system_task.cancel()
        
    except Exception as e:
        print(f"üí• Error: {e}")
        await system.stop()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Production GPT-ONLY RentalBot System')
    parser.add_argument('--interactive', '-i', action='store_true',
                       help='Run in interactive management mode')
    parser.add_argument('--test-notification', action='store_true',
                       help='Send test notification and exit')
    
    args = parser.parse_args()
    
    try:
        if args.test_notification:
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            async def test_only():
                system = ProductionRentalBotSystem()
                await system.initialize()
                success = await system.send_test_notification()
                print("‚úÖ Test completed" if success else "‚ùå Test failed")
                await system.stop()
            
            asyncio.run(test_only())
            
        elif args.interactive:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            asyncio.run(main_interactive())
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            asyncio.run(main())
            
    except KeyboardInterrupt:
        print("\nüëã Production GPT-ONLY RentalBot System stopped")
    except Exception as e:
        print(f"\nüí• Critical error: {e}")
        sys.exit(1)