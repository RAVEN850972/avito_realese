#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö —Å Avito
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any

try:
    from aiogram import Bot, Dispatcher, types, F
    from aiogram.filters import Command, CommandStart
    from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
except ImportError:
    print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiogram>=3.0.0")
    exit(1)

from core import RentalBotCore


class TelegramManagerBot:
    """
    Telegram –±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
    """
    
    def __init__(self, telegram_token: str, rental_bot: RentalBotCore):
        self.telegram_token = telegram_token
        self.rental_bot = rental_bot
        
        # Telegram –±–æ—Ç
        self.bot = Bot(token=telegram_token)
        self.dp = Dispatcher()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.authorized_managers: set = set()
        self.manager_stats: Dict[int, Dict] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'notifications_sent': 0,
            'managers_active': 0,
            'start_time': datetime.now()
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        self.logger = logging.getLogger(__name__)
        
        print("üë• Telegram Manager Bot initialized")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.dp.message(CommandStart())(self.cmd_start)
        self.dp.message(Command("stats"))(self.cmd_stats)
        self.dp.message(Command("leads"))(self.cmd_leads)
        self.dp.message(Command("system"))(self.cmd_system)
        self.dp.message(Command("help"))(self.cmd_help)
        
        # Inline –∫–Ω–æ–ø–∫–∏
        self.dp.callback_query(F.data == "get_stats")(self.btn_get_stats)
        self.dp.callback_query(F.data == "get_leads")(self.btn_get_leads)
        self.dp.callback_query(F.data == "system_status")(self.btn_system_status)
        self.dp.callback_query(F.data.startswith("lead_details_"))(self.btn_lead_details)
    
    # –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í
    
    async def cmd_start(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        manager_id = message.from_user.id
        manager_name = message.from_user.first_name or "–ú–µ–Ω–µ–¥–∂–µ—Ä"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
        self.authorized_managers.add(manager_id)
        self.manager_stats[manager_id] = {
            'name': manager_name,
            'joined': datetime.now(),
            'notifications_received': 0
        }
        
        welcome_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {manager_name}!</b>

üè† <b>GPT-ONLY RentalBot - –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>

–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Å Avito.

<b>üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ö–ª–∏–µ–Ω—Ç—ã –ø–∏—à—É—Ç –≤ —á–∞—Ç—ã Avito
2. GPT –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
3. –ì–æ—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—é–¥–∞

<b>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
/leads - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏  
/system - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/help - —Å–ø—Ä–∞–≤–∫–∞

<i>ü§ñ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ GPT</i>
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="get_stats"),
                InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏", callback_data="get_leads")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="system_status")
            ]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        
        self.logger.info(f"Manager {manager_name} ({manager_id}) authorized")
    
    async def cmd_stats(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not self._is_authorized(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            bot_stats = self.rental_bot.get_stats()
            system_uptime = datetime.now() - self.stats['start_time']
            
            stats_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

<b>üè† –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {bot_stats['users_count']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {bot_stats['completions_count']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_stats['messages_count']}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_uptime.days}–¥ {system_uptime.seconds//3600}—á

<b>üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã:</b>
üî¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.authorized_managers)}
üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['notifications_sent']}

<b>üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {(bot_stats['completions_count'] / max(bot_stats['users_count'], 1) * 100):.1f}%
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∑–∞—è–≤–∫—É: {(bot_stats['messages_count'] / max(bot_stats['completions_count'], 1)):.1f}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="get_stats")]
            ])
            
            await message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def cmd_leads(self, message: Message):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        if not self._is_authorized(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
            all_clients = await self.rental_bot.get_all_clients()
            completed_clients = [c for c in all_clients if c.is_complete and c.final_data]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            completed_clients.sort(key=lambda x: x.created_at, reverse=True)
            
            if not completed_clients:
                await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            recent_clients = completed_clients[:10]
            
            leads_text = f"""
üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–Ø–í–ö–ò ({len(recent_clients)} –∏–∑ {len(completed_clients)})</b>

"""
            
            buttons = []
            for i, client in enumerate(recent_clients, 1):
                name = client.final_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                phone = client.final_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
                created = client.created_at.strftime('%d.%m %H:%M')
                
                leads_text += f"""
<b>{i}.</b> {name}
üì± {phone}
‚è∞ {created}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
                buttons.append([InlineKeyboardButton(
                    text=f"üìÑ –î–µ—Ç–∞–ª–∏ #{i}",
                    callback_data=f"lead_details_{client.user_id}"
                )])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
            if len(buttons) > 5:
                buttons = buttons[:5]
                leads_text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(recent_clients)} –∑–∞—è–≤–æ–∫</i>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(leads_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
    
    async def cmd_system(self, message: Message):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        if not self._is_authorized(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            health = await self.rental_bot.health_check()
            
            status_icon = "‚úÖ" if health['status'] == 'healthy' else "‚ùå"
            
            system_text = f"""
‚öôÔ∏è <b>–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´</b>

{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {health['status']}
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {health['uptime_hours']:.1f} —á–∞—Å–æ–≤

<b>üß† GPT –Ø–¥—Ä–æ:</b>
üìä –ö–ª–∏–µ–Ω—Ç–æ–≤: {health['stats']['total_clients']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {health['stats']['completed_clients']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {health['stats']['total_messages']}

<b>üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
ü§ñ –ú–æ–¥–µ–ª—å: {health['config']['model']}
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {health['config']['temperature']}
üéØ –¢–æ–∫–µ–Ω–æ–≤: {health['config']['max_tokens']}

<b>üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
üíæ –ü—É—Ç—å: {health['config']['database_path']}

<i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {health['timestamp'][:19]}</i>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_status")]
            ])
            
            await message.answer(system_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def cmd_help(self, message: Message):
        """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        if not self._is_authorized(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        help_text = """
üìñ <b>–°–ü–†–ê–í–ö–ê –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í</b>

<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/leads - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
/system - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üîÑ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>
1. <b>–ö–ª–∏–µ–Ω—Ç—ã</b> –ø–∏—à—É—Ç –≤ —á–∞—Ç—ã Avito –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
2. <b>GPT –±–æ—Ç</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
3. <b>–ì–æ—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏</b> –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
4. <b>–í—ã —Å–≤—è–∑—ã–≤–∞–µ—Ç–µ—Å—å</b> —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É

<b>üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç:</b>
‚Ä¢ –ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ –°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã
‚Ä¢ –î–∞—Ç—É –∑–∞–µ–∑–¥–∞
‚Ä¢ ID —á–∞—Ç–∞ Avito –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏

<b>üß† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ GPT-ONLY —Ä–µ–∂–∏–º–∞:</b>
‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

<b>‚ö° –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /system –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "healthy"
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –æ—à–∏–±–∫–∏

<i>üè† GPT-ONLY RentalBot System v4.0</i>
        """
        
        await message.answer(help_text, parse_mode="HTML")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
    
    async def btn_get_stats(self, callback: CallbackQuery):
        """–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.message.delete()
        await self.cmd_stats(callback.message)
        await callback.answer()
    
    async def btn_get_leads(self, callback: CallbackQuery):
        """–ö–Ω–æ–ø–∫–∞ –∑–∞—è–≤–æ–∫"""
        await callback.message.delete()
        await self.cmd_leads(callback.message)
        await callback.answer()
    
    async def btn_system_status(self, callback: CallbackQuery):
        """–ö–Ω–æ–ø–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await callback.message.delete()
        await self.cmd_system(callback.message)
        await callback.answer()
    
    async def btn_lead_details(self, callback: CallbackQuery):
        """–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        if not self._is_authorized(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
            user_id = callback.data.replace("lead_details_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = await self.rental_bot.get_client_info(user_id)
            
            if not client or not client.final_data:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details_text = f"""
üìã <b>–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò</b>

üë§ <b>–ò–º—è:</b> {client.final_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{client.final_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>

üè† <b>–°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏:</b>
{client.final_data.get('residents_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}

üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤:</b> {client.final_data.get('residents_count', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}

üë∂ <b>–î–µ—Ç–∏:</b> {'‚úÖ –µ—Å—Ç—å' if client.final_data.get('has_children') else '‚ùå –Ω–µ—Ç' if client.final_data.get('has_children') is not None else '‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
{f"   –î–µ—Ç–∞–ª–∏: {client.final_data.get('children_details', '')}" if client.final_data.get('children_details') else ""}

üêï <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ:</b> {'‚úÖ –µ—Å—Ç—å' if client.final_data.get('has_pets') else '‚ùå –Ω–µ—Ç' if client.final_data.get('has_pets') is not None else '‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
{f"   –î–µ—Ç–∞–ª–∏: {client.final_data.get('pets_details', '')}" if client.final_data.get('pets_details') else ""}

üìÖ <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {client.final_data.get('rental_period', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üóìÔ∏è <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b> {client.final_data.get('move_in_deadline', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞:</b>
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {client.message_count}
‚è∞ –°–æ–∑–¥–∞–Ω: {client.created_at.strftime('%d.%m.%Y %H:%M')}
üÜî ID: <code>{client.user_id}</code>

<i>ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT-ONLY –±–æ—Ç–æ–º</i>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìû –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"copy_phone_{client.user_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="get_leads")]
            ])
            
            await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê–ú
    
    async def send_completion_notification(self, notification_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
        
        if not self.authorized_managers:
            self.logger.warning("No authorized managers to send notification")
            return
        
        message = self._format_avito_notification(notification_data)
        
        sent_count = 0
        for manager_id in self.authorized_managers.copy():
            try:
                await self.bot.send_message(manager_id, message, parse_mode="HTML")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if manager_id in self.manager_stats:
                    self.manager_stats[manager_id]['notifications_received'] += 1
                
                sent_count += 1
                
            except Exception as e:
                self.logger.error(f"Failed to send notification to manager {manager_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                self.authorized_managers.discard(manager_id)
        
        self.stats['notifications_sent'] += sent_count
        self.logger.info(f"Notification sent to {sent_count} managers")
    
    def _format_avito_notification(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å Avito"""
        
        extracted = data.get('extracted_data', {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–µ—Ç–µ–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        children_emoji = "üë∂‚úÖ" if extracted.get('has_children') else "üë∂‚ùå" if extracted.get('has_children') is not None else "üë∂‚ùì"
        pets_emoji = "üêï‚úÖ" if extracted.get('has_pets') else "üêï‚ùå" if extracted.get('has_pets') is not None else "üêï‚ùì"
        
        message = f"""
üéâ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° AVITO!</b>

üë§ <b>{extracted.get('name', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{extracted.get('phone', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω')}</code>

üè† <b>–ñ–∏–ª—å—Ü—ã:</b> {extracted.get('residents_info', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {extracted.get('residents_count', '‚ùå')} —á–µ–ª.

{children_emoji} <b>–î–µ—Ç–∏:</b> {'–µ—Å—Ç—å' if extracted.get('has_children') else '–Ω–µ—Ç' if extracted.get('has_children') is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
{pets_emoji} <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ:</b> {'–µ—Å—Ç—å' if extracted.get('has_pets') else '–Ω–µ—Ç' if extracted.get('has_pets') is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–°—Ä–æ–∫:</b> {extracted.get('rental_period', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω')}
üóìÔ∏è <b>–ó–∞–µ–∑–¥:</b> {extracted.get('move_in_deadline', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> Avito (—á–∞—Ç: <code>{data.get('chat_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>)
‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('completed_at', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')[:16]}

<i>ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT-ONLY –±–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
        """
        
        return message
    
    # –£–¢–ò–õ–ò–¢–´
    
    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return user_id in self.authorized_managers
    
    def add_manager(self, manager_id: int, manager_name: str = "Manager"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.authorized_managers.add(manager_id)
        self.manager_stats[manager_id] = {
            'name': manager_name,
            'joined': datetime.now(),
            'notifications_received': 0
        }
        self.logger.info(f"Manager {manager_name} ({manager_id}) added")
    
    def remove_manager(self, manager_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.authorized_managers.discard(manager_id)
        self.manager_stats.pop(manager_id, None)
        self.logger.info(f"Manager {manager_id} removed")
    
    def get_manager_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        return {
            'total_managers': len(self.authorized_managers),
            'notifications_sent': self.stats['notifications_sent'],
            'managers': self.manager_stats,
            'uptime_hours': (datetime.now() - self.stats['start_time']).total_seconds() / 3600
        }
    
    # –ó–ê–ü–£–°–ö (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            bot_info = await self.bot.get_me()
            self.logger.info(f"Manager bot started: @{bot_info.username}")
            
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            # –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            self.logger.error(f"Manager bot error: {e}")
            raise
        finally:
            await self.bot.session.close()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            await self.bot.session.close()
            self.logger.info("Manager bot stopped")
        except Exception as e:
            self.logger.error(f"Error stopping manager bot: {e}")


class TelegramManagerBotFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    @staticmethod
    def create_manager_notification_bot(telegram_token: str, rental_bot: RentalBotCore) -> TelegramManagerBot:
        """–°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        return TelegramManagerBot(telegram_token, rental_bot)
    
    @staticmethod
    def create_manager_bot_with_predefined_managers(
        telegram_token: str, 
        rental_bot: RentalBotCore,
        manager_ids: List[int]
    ) -> TelegramManagerBot:
        """–°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏"""
        
        bot = TelegramManagerBot(telegram_token, rental_bot)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        for manager_id in manager_ids:
            bot.add_manager(manager_id)
        
        return bot


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_manager_bot():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    from core import RentalBotCore
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    rental_bot = RentalBotCore("test-key")
    manager_bot = TelegramManagerBot("telegram-token", rental_bot)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    manager_bot.add_manager(123456789, "–ò–≤–∞–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    manager_bot.add_manager(987654321, "–ê–Ω–Ω–∞ –£–ø—Ä–∞–≤–ª—è—é—â–∞—è")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    test_notification = {
        'source': 'avito',
        'chat_id': 'test_chat_123',
        'client_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
        'extracted_data': {
            'name': '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤',
            'phone': '+79123456789',
            'residents_info': '—Å–µ–º—å—è –∏–∑ 2 —á–µ–ª–æ–≤–µ–∫',
            'residents_count': 2,
            'has_children': False,
            'has_pets': True,
            'rental_period': '1 –≥–æ–¥',
            'move_in_deadline': '–¥–æ 15 –¥–µ–∫–∞–±—Ä—è'
        },
        'completed_at': datetime.now().isoformat()
    }
    
    await manager_bot.send_completion_notification(test_notification)


if __name__ == "__main__":
    asyncio.run(example_manager_bot())