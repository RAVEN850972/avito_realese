#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPT-ONLY RentalBot –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import logging
import os
import sys
import time
from datetime import datetime
from typing import Optional, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-dotenv: pip install python-dotenv")

try:
    from aiogram import Bot, Dispatcher, types, F
    from aiogram.filters import Command, CommandStart
    from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
    from aiogram.fsm.storage.memory import MemoryStorage
except ImportError:
    print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiogram>=3.0.0")
    exit(1)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from core import RentalBotCore, BotBuilder, ClientInfo
from config import get_required_env_vars, BotConfig


class TestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM"""
    TESTING = State()
    MENU = State()


class TelegramTestBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã GPT-ONLY RentalBot
    """
    
    def __init__(self, telegram_token: str, openai_key: str):
        self.telegram_token = telegram_token
        self.openai_key = openai_key
        
        # –°–æ–∑–¥–∞–µ–º GPT —è–¥—Ä–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.rental_bot = self._create_test_rental_bot()
        
        # Telegram –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.bot = Bot(token=telegram_token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_stats = {
            'total_testers': 0,
            'total_test_messages': 0,
            'completed_tests': 0,
            'reset_count': 0,
            'start_time': datetime.now()
        }
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã
        self.active_testers: Dict[int, Dict] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = self._setup_logging()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è GPT —è–¥—Ä–∞
        self._setup_gpt_callbacks()
        
        print("üß™ Telegram Test Bot –¥–ª—è GPT-ONLY RentalBot initialized")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - TestBot - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)
    
    def _create_test_rental_bot(self) -> RentalBotCore:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ GPT —è–¥—Ä–∞"""
        return (BotBuilder(self.openai_key)
                .with_database("test_rental.db")
                .with_temperature(0.8)
                .with_max_tokens(300)
                .enable_logging(True)
                .enable_stats(True)
                .build())
    
    def _setup_gpt_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è GPT —è–¥—Ä–∞"""
        
        def on_completion_handler(client: ClientInfo):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
            self.test_stats['completed_tests'] += 1
            self.logger.info(f"Test completion for {client.user_id}")
        
        def on_error_handler(user_id: str, message: str, error: Exception):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ GPT"""
            self.logger.error(f"GPT error for {user_id}: {error}")
        
        self.rental_bot.on_completion(on_completion_handler)
        self.rental_bot.on_error(on_error_handler)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message(CommandStart())(self.cmd_start)
        self.dp.message(Command("reset"))(self.cmd_reset)
        self.dp.message(Command("stats"))(self.cmd_stats)
        self.dp.message(Command("info"))(self.cmd_info)
        self.dp.message(Command("help"))(self.cmd_help)
        self.dp.message(Command("debug"))(self.cmd_debug)
        
        # Inline –∫–Ω–æ–ø–∫–∏
        self.dp.callback_query(F.data == "start_test")(self.btn_start_test)
        self.dp.callback_query(F.data == "reset_dialog")(self.btn_reset_dialog)
        self.dp.callback_query(F.data == "show_info")(self.btn_show_info)
        self.dp.callback_query(F.data == "show_stats")(self.btn_show_stats)
        self.dp.callback_query(F.data == "system_health")(self.btn_system_health)
        self.dp.callback_query(F.data == "back_to_menu")(self.btn_back_to_menu)
        self.dp.callback_query(F.data == "confirm_reset")(self.btn_confirm_reset)
        self.dp.callback_query(F.data == "cancel_reset")(self.btn_cancel_reset)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message(F.text, TestStates.TESTING)(self.handle_test_message)
        self.dp.message(F.text)(self.handle_menu_message)
    
    # –ö–û–ú–ê–ù–î–´
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–µ—Ä–∞
        if user_id not in self.active_testers:
            self.active_testers[user_id] = {
                'name': user_name,
                'start_time': datetime.now(),
                'messages_sent': 0,
                'resets_count': 0,
                'last_activity': datetime.now()
            }
            self.test_stats['total_testers'] += 1
        
        await state.set_state(TestStates.MENU)
        
        welcome_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>

üß™ <b>GPT-ONLY RentalBot - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å GPT –∫–∞–∫ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∞–≥–µ–Ω—Ç–æ–º –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!

<b>üéØ –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º:</b>
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å GPT
‚Ä¢ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

<b>‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

<b>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ
/help - —Å–ø—Ä–∞–≤–∫–∞

<i>ü§ñ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ GPT-4o-mini</i>
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üß™ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
                InlineKeyboardButton(text="üìã –ú–æ–π –¥–∏–∞–ª–æ–≥", callback_data="show_info")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_health")
            ]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        self.logger.info(f"New tester: {user_name} ({user_id})")
    
    async def cmd_reset(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /reset"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
            ]
        ])
        
        await message.answer(
            "üîÑ <b>–°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥?\n"
            "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def cmd_stats(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        await self._show_stats(message)
    
    async def cmd_info(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /info"""
        await self._show_user_info(message)
    
    async def cmd_help(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ <b>–°–ü–†–ê–í–ö–ê –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ</b>

<b>üéØ –¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GPT-ONLY —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É –∫–≤–∞—Ä—Ç–∏—Ä.

<b>üß™ –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
2. –û–±—â–∞–π—Ç–µ—Å—å –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
3. GPT –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å
4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è

<b>üìã –ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å GPT:</b>
‚Ä¢ –°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
‚Ä¢ –í–∞—à–µ –∏–º—è
‚Ä¢ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã
‚Ä¢ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞  
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

<b>üí¨ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ "–ü—Ä–∏–≤–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞"
‚Ä¢ "–ù–∞—Å –¥–≤–æ–µ - —è 25 –ª–µ—Ç –∏ –¥–µ–≤—É—à–∫–∞ 23 –≥–æ–¥–∞"
‚Ä¢ "–î–µ—Ç–µ–π –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∫–æ—Ç"
‚Ä¢ "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä"
‚Ä¢ "–•–æ—Ç–∏–º —Å–Ω—è—Ç—å –Ω–∞ –≥–æ–¥"
‚Ä¢ "–ó–∞–µ—Ö–∞—Ç—å –Ω—É–∂–Ω–æ –¥–æ 15 —á–∏—Å–ª–∞"
‚Ä¢ "+79123456789"

<b>üî¨ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>
‚Ä¢ –û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
‚Ä¢ –°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏
‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
‚Ä¢ –°—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
‚Ä¢ –ù–µ—á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã

<b>‚ö° –ö–æ–º–∞–Ω–¥—ã:</b>
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/info - —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
/debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<b>üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ GPT-ONLY:</b>
‚úÖ –ñ–∏–≤–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚úÖ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—é–∞–Ω—Å–æ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

<i>üß† –í—Å—è –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!</i>
        """
        
        await message.answer(help_text, parse_mode="HTML")
    
    async def cmd_debug(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        user_id = str(message.from_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ GPT —è–¥—Ä–∞
            client = await self.rental_bot.get_client_info(user_id)
            
            debug_text = f"""
üêõ <b>–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ ID: <code>{user_id}</code>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {client.message_count}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {client.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω: {'‚úÖ –î–∞' if client.is_complete else '‚ùå –ù–µ—Ç'}

<b>üíæ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<code>{client.raw_data[:500] if client.raw_data else '–ü—É—Å—Ç–æ'}{'...' if len(client.raw_data or '') > 500 else ''}</code>

<b>üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
{self._format_final_data(client.final_data) if client.final_data else '‚ùå –ï—â–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã'}

<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: {self.rental_bot.config.openai_model}
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.rental_bot.config.openai_temperature}
‚Ä¢ –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: {self.rental_bot.config.openai_max_tokens}
            """
            
            await message.answer(debug_text, parse_mode="HTML")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
    
    async def btn_start_test(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        await state.set_state(TestStates.TESTING)
        
        test_text = """
üß™ <b>–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û!</b>

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –∞—Ä–µ–Ω–¥—É.
GPT –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤–∞–º –∫–∞–∫ –∞–≥–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –°–≤–µ—Ç–ª–∞–Ω–∞.

<b>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤ –∂–∏–∑–Ω–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
‚Ä¢ –î–∞–π—Ç–µ –Ω–µ—á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ GPT —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏

<b>üéØ –¶–µ–ª—å:</b> GPT –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Ñ—Ä–∞–∑–æ–π —Å [COMPLETE]

<i>üí¨ –ù–∞—á–Ω–∏—Ç–µ —Å –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞"</i>

/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_dialog")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(test_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def btn_reset_dialog(self, callback: CallbackQuery, state: FSMContext):
        """–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
            ]
        ])
        
        await callback.message.edit_text(
            "üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥?\n"
            "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    
    async def btn_confirm_reset(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞"""
        user_id = str(callback.from_user.id)
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ GPT —è–¥—Ä–µ
            success = await self.rental_bot.reset_client(user_id)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if callback.from_user.id in self.active_testers:
                    self.active_testers[callback.from_user.id]['resets_count'] += 1
                self.test_stats['reset_count'] += 1
                
                await state.set_state(TestStates.MENU)
                
                success_text = """
‚úÖ <b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.
GPT –∑–∞–±—ã–ª –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è.

–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É —Ç–µ—Å—Ç—É?
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üß™ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="start_test")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
                ])
                
                await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
                await callback.answer("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω!")
                
                self.logger.info(f"Dialog reset for user {user_id}")
                
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    async def btn_cancel_reset(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞"""
        current_state = await state.get_state()
        
        if current_state == TestStates.TESTING:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_dialog")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            await callback.message.edit_text(
                "üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è</b>\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å GPT –±–æ—Ç–æ–º.\n"
                "–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await self.cmd_start(callback.message, state)
        
        await callback.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    
    async def btn_show_info(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ"""
        await self._show_user_info(callback.message, edit=True)
        await callback.answer()
    
    async def btn_show_stats(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await self._show_stats(callback.message, edit=True)
        await callback.answer()
    
    async def btn_system_health(self, callback: CallbackQuery, state: FSMContext):
        """–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health = await self.rental_bot.health_check()
            
            status_icon = "‚úÖ" if health['status'] == 'healthy' else "‚ùå"
            
            health_text = f"""
‚öôÔ∏è <b>–ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´</b>

{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {health['status']}
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {health.get('uptime_hours', 0):.1f} —á–∞—Å–æ–≤

<b>üß† GPT –Ø–¥—Ä–æ:</b>
üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {health.get('stats', {}).get('total_clients', 0)}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {health.get('stats', {}).get('completed_clients', 0)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {health.get('stats', {}).get('total_messages', 0)}

<b>üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
ü§ñ –ú–æ–¥–µ–ª—å: {health.get('config', {}).get('model', 'unknown')}
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {health.get('config', {}).get('temperature', 0)}
üéØ –¢–æ–∫–µ–Ω–æ–≤: {health.get('config', {}).get('max_tokens', 0)}

<b>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
üë• –¢–µ—Å—Ç–µ—Ä–æ–≤: {self.test_stats['total_testers']}
üí¨ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {self.test_stats['total_test_messages']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.test_stats['completed_tests']}
üîÑ –°–±—Ä–æ—Å–æ–≤: {self.test_stats['reset_count']}

<i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_health")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
            
            await callback.message.edit_text(health_text, reply_markup=keyboard, parse_mode="HTML")
            
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}", show_alert=True)
    
    async def btn_back_to_menu(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é"""
        await state.set_state(TestStates.MENU)
        await self.cmd_start(callback.message, state)
        await callback.answer()
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
    
    async def handle_test_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = str(message.from_user.id)
        text = message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if message.from_user.id in self.active_testers:
            self.active_testers[message.from_user.id]['messages_sent'] += 1
            self.active_testers[message.from_user.id]['last_activity'] = datetime.now()
        
        self.test_stats['total_test_messages'] += 1
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing
            await self.bot.send_chat_action(message.chat.id, "typing")
            
            start_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT —è–¥—Ä–æ
            response = await self.rental_bot.chat(user_id, text)
            
            response_time = time.time() - start_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            bot_message = response.message
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if response.is_completed:
                bot_message += "\n\nüéâ <b>–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!</b>"
                
                if response.extracted_data:
                    bot_message += "\n\nüìã <b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>"
                    bot_message += f"\n{self._format_extracted_data(response.extracted_data)}"
                
                # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="confirm_reset")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
                
                await message.answer(bot_message, reply_markup=keyboard, parse_mode="HTML")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
                await state.set_state(TestStates.MENU)
                
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_dialog")],
                    [InlineKeyboardButton(text="üìã –ú–æ–π –¥–∏–∞–ª–æ–≥", callback_data="show_info")]
                ])
                
                await message.answer(bot_message, reply_markup=keyboard, parse_mode="HTML")
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            self.logger.info(f"Test message processed for {user_id} in {response_time:.2f}s")
            
        except Exception as e:
            error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n<code>{str(e)}</code>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–∏–∞–ª–æ–≥."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_dialog")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            await message.answer(error_text, reply_markup=keyboard, parse_mode="HTML")
            self.logger.error(f"Test error for {user_id}: {e}")
    
    async def handle_menu_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –º–µ–Ω—é"""
        help_text = """
üì± <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:</b>

üß™ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üîÑ /reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥  
üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìã /info - –º–æ–π –¥–∏–∞–ª–æ–≥
‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞
üêõ /debug - –æ—Ç–ª–∞–¥–∫–∞

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß™ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test")]
        ])
        
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")
    
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    
    async def _show_stats(self, message: Message, edit: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        uptime = datetime.now() - self.test_stats['start_time']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GPT —è–¥—Ä–∞
        gpt_stats = self.rental_bot.get_stats()
        
        stats_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø</b>

<b>üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞:</b>
üë• –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤: {self.test_stats['total_testers']}
üí¨ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {self.test_stats['total_test_messages']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.test_stats['completed_tests']}
üîÑ –°–±—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤: {self.test_stats['reset_count']}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds//3600}—á

<b>üß† GPT –Ø–¥—Ä–æ:</b>
üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {gpt_stats['users_count']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {gpt_stats['messages_count']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π: {gpt_stats['completions_count']}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {gpt_stats['active_conversations']}

<b>üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π –Ω–∞ —Ç–µ—Å—Ç–µ—Ä–∞: {(self.test_stats['completed_tests'] / max(self.test_stats['total_testers'], 1)):.1f}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {(self.test_stats['total_test_messages'] / max(self.test_stats['completed_tests'], 1)):.1f}
üîÑ –°–±—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–µ—Ä–∞: {(self.test_stats['reset_count'] / max(self.test_stats['total_testers'], 1)):.1f}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_stats")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if edit:
            await message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _show_user_info(self, message: Message, edit: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(message.from_user.id)
        
        try:
            client = await self.rental_bot.get_client_info(user_id)
            
            if client.is_complete and client.final_data:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
                info_text = f"""
üìã <b>–í–ê–® –î–ò–ê–õ–û–ì (–ó–ê–í–ï–†–®–ï–ù)</b>

‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞:</b>
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {client.message_count}
‚è∞ –°–æ–∑–¥–∞–Ω: {client.created_at.strftime('%d.%m.%Y %H:%M')}
üéØ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω

<b>üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
{self._format_extracted_data(client.final_data)}

<i>ü§ñ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã GPT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
                """
            elif client.message_count > 0:
                # –î–∏–∞–ª–æ–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                dialog_preview = client.raw_data[:300] + "..." if len(client.raw_data) > 300 else client.raw_data
                
                info_text = f"""
üìã <b>–í–ê–® –î–ò–ê–õ–û–ì (–í –ü–†–û–¶–ï–°–°–ï)</b>

‚è≥ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {client.message_count}
‚è∞ –ù–∞—á–∞—Ç: {client.created_at.strftime('%d.%m.%Y %H:%M')}
üéØ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ

<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
<code>{dialog_preview}</code>

<i>üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞</i>
                """
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                info_text = """
üìã <b>–í–ê–® –î–ò–ê–õ–û–ì</b>

üÜï <b>–î–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç</b>

–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GPT-ONLY —Å–∏—Å—Ç–µ–º—É.

<i>üí° –û–±—â–∞–π—Ç–µ—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç</i>
                """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="start_test")],
                [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_dialog")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            if edit:
                await message.edit_text(info_text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await message.answer(info_text, reply_markup=keyboard, parse_mode="HTML")
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
            await message.answer(error_text)
    
    def _format_extracted_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã"
        
        formatted = []
        
        # –ò–º—è
        name = data.get('name', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        formatted.append(f"üë§ <b>–ò–º—è:</b> {name}")
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        phone = data.get('phone', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω')
        formatted.append(f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>")
        
        # –°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏
        residents_info = data.get('residents_info', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        residents_count = data.get('residents_count', '‚ùå')
        formatted.append(f"üè† <b>–ñ–∏–ª—å—Ü—ã:</b> {residents_info}")
        formatted.append(f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {residents_count}")
        
        # –î–µ—Ç–∏
        children_status = self._format_boolean_field(data.get('has_children'), '–¥–µ—Ç–∏')
        formatted.append(f"üë∂ <b>–î–µ—Ç–∏:</b> {children_status}")
        
        children_details = data.get('children_details')
        if children_details:
            formatted.append(f"   ‚îî <i>{children_details}</i>")
        
        # –ñ–∏–≤–æ—Ç–Ω—ã–µ
        pets_status = self._format_boolean_field(data.get('has_pets'), '–∂–∏–≤–æ—Ç–Ω—ã–µ')
        formatted.append(f"üêï <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ:</b> {pets_status}")
        
        pets_details = data.get('pets_details')
        if pets_details:
            formatted.append(f"   ‚îî <i>{pets_details}</i>")
        
        # –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã
        rental_period = data.get('rental_period', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω')
        formatted.append(f"üìÖ <b>–°—Ä–æ–∫:</b> {rental_period}")
        
        # –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
        move_in = data.get('move_in_deadline', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        formatted.append(f"üóìÔ∏è <b>–ó–∞–µ–∑–¥:</b> {move_in}")
        
        return '\n'.join(formatted)
    
    def _format_boolean_field(self, value, field_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π"""
        if value is True:
            return f"‚úÖ –µ—Å—Ç—å"
        elif value is False:
            return f"‚ùå –Ω–µ—Ç"
        else:
            return f"‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    def _format_final_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è debug"""
        if not data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        formatted = []
        for key, value in data.items():
            formatted.append(f"‚Ä¢ {key}: {value}")
        
        return '\n'.join(formatted)
    
    # –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GPT —è–¥—Ä–æ
            await self.rental_bot._ensure_initialized()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            
            print("üöÄ Telegram Test Bot –∑–∞–ø—É—â–µ–Ω!")
            print(f"üì± Bot: @{bot_info.username}")
            print(f"üß† GPT –º–æ–¥–µ–ª—å: {self.rental_bot.config.openai_model}")
            print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.rental_bot.config.openai_temperature}")
            print("="*50)
            print("üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print("="*50)
            
            self.logger.info(f"Test bot started: @{bot_info.username}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot, skip_updates=True)
            
        except Exception as e:
            self.logger.error(f"Test bot startup error: {e}")
            raise
        finally:
            await self.bot.session.close()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            await self.bot.session.close()
            self.logger.info("Test bot stopped")
        except Exception as e:
            self.logger.error(f"Error stopping test bot: {e}")
    
    def get_test_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            **self.test_stats,
            'active_testers': len(self.active_testers),
            'gpt_stats': self.rental_bot.get_stats(),
            'uptime_seconds': (datetime.now() - self.test_stats['start_time']).total_seconds()
        }


class TelegramTestBotFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    @staticmethod
    def create_test_bot(telegram_token: str, openai_key: str) -> TelegramTestBot:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç"""
        return TelegramTestBot(telegram_token, openai_key)
    
    @staticmethod
    def create_demo_bot(telegram_token: str, openai_key: str) -> TelegramTestBot:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π"""
        bot = TelegramTestBot(telegram_token, openai_key)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ
        bot.rental_bot.config.openai_temperature = 0.9  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        bot.rental_bot.config.openai_max_tokens = 400   # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        
        return bot


# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º –±–æ—Ç–æ–º
class TestBotCLI:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, bot: TelegramTestBot):
        self.bot = bot
    
    async def run_with_console(self):
        """–ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        print("\nüéõÔ∏è Test Bot Management Console")
        print("Commands: stats, testers, health, quit")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        bot_task = asyncio.create_task(self.bot.start())
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(3)
        
        try:
            while True:
                try:
                    command = input("\n> ").strip().lower()
                    
                    if command in ['quit', 'exit']:
                        break
                    elif command == 'stats':
                        await self._show_stats()
                    elif command == 'testers':
                        await self._show_testers()
                    elif command == 'health':
                        await self._show_health()
                    elif command == 'help':
                        self._show_help()
                    else:
                        print("‚ùå Unknown command. Type 'help' for available commands.")
                        
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"‚ùå Error: {e}")
        
        finally:
            print("\n‚èπÔ∏è Stopping test bot...")
            await self.bot.stop()
            bot_task.cancel()
    
    async def _show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.bot.get_test_stats()
        
        print(f"\nüìä Test Bot Statistics:")
        print(f"   üë• Total testers: {stats['total_testers']}")
        print(f"   üí¨ Test messages: {stats['total_test_messages']}")
        print(f"   ‚úÖ Completed tests: {stats['completed_tests']}")
        print(f"   üîÑ Resets: {stats['reset_count']}")
        print(f"   ‚è∞ Uptime: {stats['uptime_seconds']//3600:.0f}h {(stats['uptime_seconds']%3600)//60:.0f}m")
        
        gpt_stats = stats['gpt_stats']
        print(f"\nüß† GPT Core:")
        print(f"   üë• Clients: {gpt_stats['users_count']}")
        print(f"   üí¨ Messages: {gpt_stats['messages_count']}")
        print(f"   ‚úÖ Completions: {gpt_stats['completions_count']}")
    
    async def _show_testers(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤"""
        if not self.bot.active_testers:
            print("\nüë• No active testers")
            return
        
        print(f"\nüë• Active Testers ({len(self.bot.active_testers)}):")
        for user_id, info in self.bot.active_testers.items():
            last_activity = info['last_activity']
            time_since = datetime.now() - last_activity
            
            print(f"   ‚Ä¢ {info['name']} (ID: {user_id})")
            print(f"     üì§ Messages: {info['messages_sent']}")
            print(f"     üîÑ Resets: {info['resets_count']}")
            print(f"     ‚è∞ Last activity: {time_since.seconds//60}m ago")
    
    async def _show_health(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health = await self.bot.rental_bot.health_check()
            
            print(f"\n‚öôÔ∏è System Health:")
            print(f"   Status: {'‚úÖ Healthy' if health['status'] == 'healthy' else '‚ùå Unhealthy'}")
            print(f"   Uptime: {health.get('uptime_hours', 0):.1f}h")
            print(f"   Model: {health.get('config', {}).get('model', 'unknown')}")
            print(f"   Temperature: {health.get('config', {}).get('temperature', 0)}")
            
        except Exception as e:
            print(f"‚ùå Health check failed: {e}")
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("\nüìñ Available commands:")
        print("   stats    - show test statistics")
        print("   testers  - show active testers")
        print("   health   - system health check")
        print("   quit     - stop the bot")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    print("üß™ GPT-ONLY RENTALBOT - TELEGRAM TEST ENVIRONMENT")
    print("="*60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("ü§ñ –ü–æ–ª–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω –ª–æ–≥–∏–∫–∏ —á–µ—Ä–µ–∑ Telegram")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_vars = get_required_env_vars()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
        test_bot = TelegramTestBotFactory.create_test_bot(
            env_vars['telegram_token'],
            env_vars['openai_key']
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await test_bot.start()
        
    except KeyboardInterrupt:
        print("\nüëã Test bot stopped by user")
    except Exception as e:
        print(f"\nüí• Critical error: {e}")
        sys.exit(1)


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
async def main_with_console():
    """–ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    try:
        env_vars = get_required_env_vars()
        
        test_bot = TelegramTestBotFactory.create_test_bot(
            env_vars['telegram_token'],
            env_vars['openai_key']
        )
        
        cli = TestBotCLI(test_bot)
        await cli.run_with_console()
        
    except Exception as e:
        print(f"üí• Error: {e}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Telegram Test Bot for GPT-ONLY RentalBot')
    parser.add_argument('--console', '-c', action='store_true',
                       help='Run with console management interface')
    parser.add_argument('--demo', action='store_true',
                       help='Run in demo mode with enhanced responses')
    
    args = parser.parse_args()
    
    try:
        if args.console:
            # –ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Å–æ–ª—å—é
            asyncio.run(main_with_console())
        elif args.demo:
            # –î–µ–º–æ —Ä–µ–∂–∏–º
            async def demo_mode():
                env_vars = get_required_env_vars()
                demo_bot = TelegramTestBotFactory.create_demo_bot(
                    env_vars['telegram_token'],
                    env_vars['openai_key']
                )
                await demo_bot.start()
            
            asyncio.run(demo_mode())
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            asyncio.run(main())
            
    except KeyboardInterrupt:
        print("\nüëã Telegram Test Bot stopped")
    except Exception as e:
        print(f"\nüí• Critical error: {e}")
        sys.exit(1)